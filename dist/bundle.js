(()=>{"use strict";const e={components:[],check:function(){e.components.forEach((e=>{document.contains(e.node)||e.exit()}))},add:function(e,t){this.components.indexOf(e)>-1||(this.components.push(e),e.exit=t)}},t="number string undefined".split(" "),n=e=>{if(!t.includes(typeof e))throw`Argument is not an string, number or undefined : '${e}' in primitiveDispatcher() method.`},a=Symbol("firstTime"),i=Symbol("stateIndex"),o=Symbol("defaultStateDone"),s=Symbol("setProperties"),l=Symbol("addChild"),r=Symbol("children"),c=Symbol("subComponent"),p=Symbol("listeners"),d=Symbol("settingListener"),h=Symbol("exec"),u=Symbol("customMap"),m=Symbol("customMap");let g={beforeAppendChild:function(e){},prop:{},noProp:["beforeAppendChild","prop","enableSubComponents","enableEvents","kiwiSelector","useState","noProp"],enableSubComponents:function(e){this[c]=e},enableEvents:function(e){this[p]=Array.isArray(e)?e:[e]},kiwiSelector:function(e){document.querySelector(e).appendChild(this[h]())},useState:function(t){this.state||(this.state={});let n=this[i]++;return this[o]||(this.state[n]=t),[void 0===t?t:JSON.parse(JSON.stringify(this.state[n])),t=>{"object"==typeof this.state[n]&&Object.assign(this.state[n],"function"==typeof t?t():t),this.state[n]=t;let a=this.node;this.node.parentNode.replaceChild(this[h](!0),a),e.check()}]},outOfDom:function*(e){yield null,yield e+10},arrayDispatcher:function(e=[]){if(!Array.isArray(e))throw`Argument is not an array: '${e}' in arrayDispacher() method.`;const t=[];return[{get items(){return[...e]},subscribe:function(e){t.push(e)}},n=>{console.log(n),e=n,t.forEach((e=>e()))},e]},variableDispatcher:function(e){n(e);const t=[];let a=e;return[{get value(){return a},subscribe:function(e){t.push(e)}},e=>{n(e),a=e,t.forEach((e=>e()))},a]}};const b=function(){return this[a]=!0,this[i]=0,this[o]=!1,this[s]=function(e){const t={};for(let n=0;n<e.length;n++)if("function"==typeof this[e[n].value])t[e[n].name]=this.noProp.includes(e[n].value)?e[n].value:this[e[n].value](),this.noProp.includes(e[n].value)&&console.warn(`Atttribute Value '${e[n].value}' as string due it is a reserved keyword`);else try{t[e[n].name]=JSON.parse(e[n].value)}catch(a){t[e[n].name]=e[n].value}return t},this[l]=function(e){return Object.keys(this[c]).map((t=>{let n=this[c][t],a=e.querySelectorAll(t.toLowerCase());this[r]=this[r]||[],this[r].forEach((e=>{e.free=!0}));for(let e=0;e<a.length;e++){const i=a[e];let o=this[s](i.attributes),l=null,c=0,p=!1;for(c=0;c<this[r].length;c++){const e=this[r][c];if(e.instanceComponet.constructor.name==t&&e.free){l=e.instanceComponet,p=!0,this[r][c]={free:!1,instanceComponet:e.instanceComponet};break}}let d=p?l:f(n);p||(this[r][e]={free:!1,instanceComponet:d}),Object.assign(d.prop,o);let u=d[h]();i.parentNode.replaceChild(u,i)}})),e},this[c]=[],this[p]=[],this[d]=function(e){this[p].map((t=>{let n=e.querySelectorAll("["+t+"]");for(let e=0;e<n.length;e++){const a=n[e];let i=a.getAttribute(t);if(!i)throw"There is no attribute '"+t+"' value on:\n\n"+a.outerHTML;a.addEventListener(t,this[i].bind(this))}}))},this[m]=Array.prototype.toString,this[u]=function(){return this.join(" ")},this[h]=function(t){var n=document.createElement("section");this[i]=0,Array.prototype.toString=this[u];let s=this.constructor(this.prop);if(Array.prototype.toString=this[m],this[o]=!0,n.innerHTML=s,this[d](n),this[l](n),this[a]){this[a]=!1;let t=this.beforeAppendChild(n);"function"==typeof t&&e.add(this,t)}if(this.node=n.children[0],!this.node)throw`Check the return of ${this.constructor.name}\n${this.constructor.toString()}`;return this.node},this}.bind(g)();function y(){}Object.assign(y.prototype,b);let f=e=>{let t=new y;return t.constructor=e,t};const v=f,w=new class{constructor(){this.event={}}subscribe(e,t){this.event[e]||(this.event[e]=[]),this.event[e].push(t)}unSubscribe(e,t){this.event[e]&&(this.event[e]=this.event[e].filter((e=>e!=t)))}dispatch(e,t){this.event[e]&&this.event[e].forEach((e=>e(t)))}};function x({size:e="20"}){return`\n    <svg width="${e}" height="${e}" class="k-rotating-8">\n        <circle cx="50%" cy="50%" r="40%" stroke="olive" stroke-width="12%" fill="chartreuse" />\n        \n        <circle cx="50%" cy="35%" r="7%"  fill="green" />\n        <circle cx="65%" cy="45%" r="7%"  fill="green" />\n        <circle cx="60%" cy="65%" r="7%"  fill="green" />\n        <circle cx="40%" cy="65%" r="7%"  fill="green" />\n        <circle cx="35%" cy="45%" r="7%"  fill="green" />\n        \n    </svg>\n        `}function S(){return this.goto=e=>{w.dispatch("General-page",0),e.preventDefault()},this.enableEvents("click"),this.enableSubComponents({Logo:x}),'\n<header class="fixed-top">\n  <div class="bg-dark collapse" id="navbarHeader" style="">\n    <div class="container">\n      <div class="row">\n        <div class="col-sm-8 col-md-7 py-4">\n          <h4 class="text-white">About</h4>\n          <p class="text-muted">Add some information about the album below, the author, or any other background context. Make it a few sentences long so folks can pick up some informative tidbits. Then, link them off to some social networking sites or contact information.</p>\n        </div>\n        <div class="col-sm-4 offset-md-1 py-4">\n          <h4 class="text-white">Contact</h4>\n          <ul class="list-unstyled">\n            <li><a href="#" class="text-white">Follow on Twitter</a></li>\n            <li><a href="#" class="text-white">Like on Facebook</a></li>\n            <li><a href="#" class="text-white">Email me</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class="navbar navbar-dark bg-dark shadow-sm">\n    <div class="container">\n      <a href="#"  click="goto" class="navbar-brand d-flex align-items-center k-color-2">\n        <Logo></Logo>\n        <strong class="ps-2 k-color-2">Kiwi JS</strong>\n      </a>\n      <button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#navbarHeader" aria-controls="navbarHeader" aria-expanded="false" aria-label="Toggle navigation">\n        <span class="navbar-toggler-icon"></span>\n      </button>\n    </div>\n  </div>\n</header>\n    '}function C(){let e="Installation Main Concepts Advanced Guides API_Reference Hooks Testing Contributing FAQ".split(" ");return this.enableSubComponents({Logo:x}),`\n<div class="container-fluid bg-dark text-light">\n    <div class="container text-muted">\n        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 py-5">\n            \x3c!-- 1 --\x3e\n            <div class="col-lg-6 d-flex align-items-start">\n                <div>\n                    <h4 class="fw-bold mb-0">Open Source</h4>\n                    <p> 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">Samu Garron Dev</a></p>\n                    <center>\n                        <Logo size="150"></Logo>\n                    </center>\n                    \n                </div>\n            </div>\n            \x3c!-- 2 --\x3e\n            <div class="col-lg-3 d-flex align-items-start">\n                <div>\n                <h4 class="fw-bold mb-0 text-muted">Docs</h4>\n                \x3c!-- <p>Paragraph of text beneath the heading to explain the heading.</p> --\x3e\n                    <ul class="list-unstyled text-small">\n                        ${e.map((e=>`<li>${e}</li>`))}\n                    </ul>\n                </div>\n            </div>\n            \x3c!-- 3 --\x3e\n            <div class="col-lg-3 d-flex align-items-start">\n                <div>\n                <h4 class="fw-bold mb-0">Channels</h4>\n                <p>Paragraph of text beneath the heading to explain the heading.</p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n    \n    `}function k(){let e="HelloWorld IntroducingTemplateLiterals RenderingElements ComponentsAndProps StateAndLifecycle HandlingEvents ConditionalRendering ListAndKeys Forms LiftingStateUp CompositionVsInheritance ThinkingInReact";return e=e.split(" "),this.goto=e=>{w.dispatch("Docs-page",1*e.target.getAttribute("index")),e.preventDefault(),e.target.parentNode.parentNode.querySelectorAll("a").forEach((e=>{e.classList.remove("k-color-2")})),e.currentTarget.classList.add("k-color-2"),console.log(e.target)},this.enableEvents(["click"]),`<div class="col-md-4">\n    <div class="position-sticky" style="top: 4rem; padding-bottom: 4rem"> \n      <div class="p-4">\n        <h4 class="fst-italic">Main concepts</h4>\n        <ol class="list-unstyled mb-0">\n          ${e.map(((e,t)=>`<li><a href="#"  click="goto" index="${t}">${e}</a></li>`))}\n        </ol>\n      </div>\n\n      <div class="p-4 mb-8 bg-dark rounded text-light" >\n        <h4 class="fst-italic">About</h4>\n        <p class="mb-0">Customize this section to tell your visitors a little bit about your publication, writers, content, or something else entirely. Totally up to you.</p>\n      </div>\n    </div>\n  </div>`}function D({full:e=!1,id:t}){return this.beforeAppendChild=t=>{this.fullScreen=e,t.querySelector("pre").style.maxHeight=this.fullScreen?"none":"200px"},this.fullScreen=e=>{this.fullScreen=!this.fullScreen,e.currentTarget.parentNode.querySelector("pre").style.maxHeight=this.fullScreen?"none":"200px",e.currentTarget.querySelector("svg").setAttribute("fill",this.fullScreen?"gray":"chartreuse")},this.enableEvents("click"),`\n    <div ${t?`id="${t}"`:""} class="card mb-4 rounded-3 shadow-sm border-dark k-bg-4">\n        <div click="fullScreen" class="d-flex align-items-center justify-content-between card-header py-3 text-white bg-dark border-dark" style="cursor: pointer;">\n            <h4 class="my-0 fw-normal">Demo</h4>\n            <svg with="20" height="20" fill="chartreuse" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">\n                <g>\n                    <g>\n                    <path d="m251.6,185.7c-36.9,0-67,31.5-67,70.3 0,38.7 30,70.3 67,70.3 36.9,0 67-31.5 67-70.3 0-38.7-30.1-70.3-67-70.3z"/>\n                    <path d="m251.6,367.1c-59.4,0-107.8-49.8-107.8-111.1 0-61.3 48.4-111.1 107.8-111.1s107.8,49.8 107.8,111.1c0,61.3-48.4,111.1-107.8,111.1zm246.3-121.9c-63.8-102.4-149.8-158.8-241.9-158.8-92.1,0-178.1,56.4-241.9,158.8-4.1,6.6-4.1,15 0,21.6 63.8,102.4 149.8,158.8 241.9,158.8 92.1,0 178-56.4 241.9-158.8 4.1-6.6 4.1-15 0-21.6z"/>\n                    </g>\n                </g>\n            </svg>\n        </div>\n        <div class="card-body text-white">\n            <pre style="overflow-y:scroll; max-height: 200px; transition: max-height 0.5s ease-out;"><code class="language-javascript" ></code></pre>\n        </div>\n    </div>\n    `}function T(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    ComponentsAndProps\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function I(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    CompositionVsInheritance\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function J(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    ConditionalRendering\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function A(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    Forms\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function L(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    HandlingEvents\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function M(){return this.beforeAppendChild=async e=>{let t=e.querySelector("code"),n=await fetch("react/docs/snippets/HelloWorld.js");n=await n.text(),t.textContent=n,Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    Hello World\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">The smallest Kiwi JS example</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>It displays a heading saying “Hello, Taylor!” on the page.</p>\n      <hr>\n      <h2>How to Read This Guide</h2>\n      <p>In this guide, we will examine the building blocks of Kiwi JS apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.</p>\n      <blockquote class="blockquote">\n        <p>Tip</p>\n      </blockquote>\n      <p>This guide is designed for people who prefer learning concepts step by step. If you prefer to learn by doing, check out our practical tutorial. You might find this guide and the tutorial complementary to each other.</p>\n      <p>This is the first chapter in a step-by-step guide about main Kiwi JS concepts. You can find a list of all its chapters in the navigation sidebar. If you’re reading this from a mobile device, you can access the navigation by pressing the button in the bottom right corner of your screen.</p>\n      <p>Every chapter in this guide builds on the knowledge introduced in earlier chapters. <b>You can learn most of Kiwi JS by reading the “Main Concepts” guide chapters in the order they appear in the sidebar.</b> For example, “Introducing JSX” is the next chapter after this one.</p>\n\n      <h3>Knowledge Level Assumptions</h3>\n      <p>Kiwi JS is a JavaScript library, and so we’ll assume you have a basic understanding of the JavaScript language. <b>If you don’t feel very confident, we recommend going through a JavaScript tutorial to check your knowledge level</b> and enable you to follow along this guide without getting lost. It might take you between 30 minutes and an hour, but as a result you won’t have to feel like you’re learning both Kiwi JS and JavaScript at the same time.</p>\n      \n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>This guide occasionally uses some newer JavaScript syntax in the examples. If you haven’t worked with JavaScript in the last few years, these three points should get you most of the way.</em>\n      <br />\n      <br />\n\n      <h2>Let’s Get Started!</h2>\n      <p>Keep scrolling down, and you’ll find the link to the next chapter of this guide right before the website footer.</p>\n      \n  </div>'}function q(){return this.beforeAppendChild=e=>{let t=e.children[0],n=async(e,n)=>{let a=t.querySelector(`#${e} code`),i=await fetch(`react/docs/snippets/${n}.js`);i=await i.text(),a.textContent=i,Prism.highlightAll()};n("literal","TemplateLiterals"),n("formater","FormatName"),n("malicious","PreventsInjectionAttacks"),n("stringify","Stringify")},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    Introducing Template Literals\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this functional component:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode full="true" id="literal"></DisplayCode>\n      <p>This tiny component shows <i>Hello Taylor</i> on screen.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It use a single string, and it is native in JavaScript. We recommend using it with Kiwi JS to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basics concepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>Kiwi JS does not need to over engineer adding more libraries like JSX. In fact, the rendering goes straight into HTML using the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, Kiwi JS separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode full="true" id="formater"></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions and then they will by taken as strings.</p>\n      \n      <h3>Prevents Injection Attacks</h3>\n      <p>If there is Javascript inside of the nodes it will not be rexecuted</p>\n      <DisplayCode full="true" id="malicious"></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <p>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</p>   \n      <DisplayCode full="true" id="stringify"></DisplayCode>\n  </div>'}function H(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    LiftingStateUp\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function N(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    ListAndKeys\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function O(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    RenderingElements\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function E(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    StateAndLifecycle\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function R(){return this.beforeAppendChild=async e=>{let t=e.querySelectorAll("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.forEach((e=>{e.textContent=n})),Prism.highlightAll()},this.enableSubComponents({DisplayCode:D}),'<div class="col-md-8" style="padding-top: 2rem; margin-bottom: 2rem" >\n    <h2 class="pb-4 mb-4 fst-italic border-bottom">\n    ThinkingInReact\n    </h2>\n\n    <article class="blog-post">\n      <h3 class="blog-post-title">Consider this variable declaration:</h3>\n      <p class="blog-post-meta">November 4, 2021 by <a href="https://twitter.com/samugarrondev" target="_blank" rel="noopener noreferrer">@samugarrondev</a></p>\n\n        <DisplayCode></DisplayCode>\n      <p>This funny tag syntax is a string similar to HTML sintax.</p>\n      <hr>\n      <h2>Template Literals</h2>\n      <p>It is a single string, and it is native in JavaScript. We recommend using it with React to describe what the UI should look like. It may remind you of a template language, but it comes with the full power of JavaScript.</p>\n      <p>This string will became in HTML “elements”. We will explore rendering them to the DOM in the next section. Below, you can find the basicsconcepts necessary to get you started.</p>\n      \n      <h3>Why Template Literals?</h3>\n\n      <p>React do not need to over engineer ading more libraries like JSX. In fact, the rendering goes streightly into HTML usint the innerHTML property of the nodeElements from the DOM.</p>\n      <p>Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.</p>\n      <p>With that out of the way, let’s get started!</p>\n\n      <h3>Printing variables into the template literals</h3>\n      <p>In the example below, we declare a variable called name and then use it inside template literals by wrapping it in a dollar sign plus curly braces:</p>\n      <DisplayCode></DisplayCode>\n\n      <p>You can put any valid JavaScript expression inside the curly braces in template literals. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n      <p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an (h1) element.</p>\n      <DisplayCode></DisplayCode>\n\n\n      <blockquote class="blockquote">\n        <p>Note</p>\n      </blockquote>\n      <em>If you want to sent a JSON string you must to use ingle quotes to avoid conficts with the double quottes from the JSON format.</em>   \n      \n  </div>'}function W(){this.enableSubComponents({HelloWorld:M,IntroducingTemplateLiterals:q,RenderingElements:O,ComponentsAndProps:T,StateAndLifecycle:E,HandlingEvents:L,ConditionalRendering:J,ListAndKeys:N,Forms:A,LiftingStateUp:H,CompositionVsInheritance:I,ThinkingInReact:R});let e=JSON.parse(localStorage.getItem("concept")||"0");const[t,n]=this.useState(e);return this.beforeAppendChild=()=>{w.subscribe("Docs-page",(e=>{localStorage.setItem("concept",e),n(e),window.scrollTo({top:0,left:0,behavior:"smooth"})}))},`${["<HelloWorld></HelloWorld>","<IntroducingTemplateLiterals></IntroducingTemplateLiterals>","<RenderingElements></RenderingElements>","<ComponentsAndProps></ComponentsAndProps>","<StateAndLifecycle></StateAndLifecycle>","<HandlingEvents></HandlingEvents>","<ConditionalRendering></ConditionalRendering>","<ListAndKeys></ListAndKeys>","<Forms></Forms>","<LiftingStateUp></LiftingStateUp>","<CompositionVsInheritance></CompositionVsInheritance>","<ThinkingInReact></ThinkingInReact>"][t]}`}function P(){return this.enableSubComponents({Switcher:W,Aside:k}),'<div class="container" style="padding-top: 56px">\n        <div class="row g-5">\n            <Switcher></Switcher>\n            <Aside><Aside>\n        </div>\n    </div>'}function j({variable:e}){let[t,n]=this.useState(e.value);return this.beforeAppendChild=()=>{e.subscribe((()=>{n(e.value)}))},`\n        <div class="content">\n            ${(new remarkable.Remarkable).render(t)}\n        </div>`}function F(){this.enableEvents(["keyup"]);const[e,t,n]=this.variableDispatcher("Hello, **world**!");return this.handleChange=e=>{t(e.target.value)},this.enableSubComponents({Output:j}),this.variableProvider=()=>e,`\n        <div class="MarkdownEditor">\n            <h3>Input</h3>\n            <label for="markdown-content">\n                Enter some markdown\n            </label><br/>\n            <textarea  id="markdown-content" \n                keyup="handleChange">${n}</textarea>\n            <h3>Output</h3>\n            <Output variable="variableProvider"></Output>\n        </div>`}function $(){return this.beforeAppendChild=async e=>{let t=e.querySelector("code"),n=await fetch("react/livecode/Remarkable.js");n=await n.text(),t.textContent=n,Prism.highlightAll(),v(F).kiwiSelector(".demo-external-library")},this.enableSubComponents({DisplayCode:D}),'\n    <div class="album pt-5">\n        <div class="container">\n            <div class="row row-cols-1 row-cols-lg-2 row-cols-lg-3 g-3">\n                \x3c!-- left --\x3e\n                <div class="col-lg-3">\n                    <div class="">\n                        <div class="card-body">\n                            <h3 class="text-black fw-bold">A Component Using External Plugins</h3>\n                            <p class="card-text text-bold">Kiwi JS really allows you to interface with other libraries and frameworks. This example uses <b>remarkable</b>, an external Markdown library, to convert the &lt;textarea&gt;’s value in real time.</p>\n                        </div>\n                    </div>\n                </div>\n                \x3c!-- left --\x3e\n                <div class="col-lg-6">\n                    <DisplayCode></DisplayCode>\n                </div>\n                \x3c!-- demo --\x3e\n                <div class="col-lg-3"> \n                    <div class="card mb-4 rounded-3 shadow-sm border-secondary">\n                        <div class="card-header py-3 text-white bg-secondary ">\n                            <h4 class="my-0 fw-normal">Result</h4>\n                        </div>\n                        <div class="card-body border-secondary demo-external-library">\n                        </div>\n                    </div>\n                </div>\n            \n            </div>\n        </div>\n      </div>\n        '}function U({list:e}){let[t,n]=this.useState(e.items);return this.beforeAppendChild=()=>{e.subscribe((()=>{n(e.items)}))},`\n    <ul>\n        ${t.map((e=>`<li>${e}</li>`))}\n    </ul>`}function K({list:e}){let[t,n]=this.useState(e.items);return this.beforeAppendChild=()=>{e.subscribe((()=>{n(e.items)}))},`<button >Add #${t.length+1}</button>`}function B(){this.enableSubComponents({TodoList:U,button:K});const[e,t,n]=this.arrayDispatcher(["default value"]);return this.handleChange=function(e){n.push(e.target.querySelector("input").value),t(n),e.target.querySelector("input").value="",e.preventDefault()},this.enableEvents(["submit"]),this.list=()=>e,'<div>\n    <h3>TODO</h3>\n    <TodoList list="list"></TodoList>\n    <form submit="handleChange" >\n        <label for="new-todo">What needs to be done?</label>\n        <input id="new-todo" value="">\n        <button list="list"></button>\n    </form>\n</div>'}function Y(){let[e,t]=this.useState(!0);return this.beforeAppendChild=async e=>{this.codeContainer=e.querySelector("pre");let t=e.querySelector("code"),n=await fetch("react/livecode/Todo.js");n=await n.text(),t.textContent=n,Prism.highlightAll(),v(B).kiwiSelector(".todo-app"),this.fullScreen=!1},this.enableSubComponents({DisplayCode:D}),'\n    <div class="album pt-5">\n        <div class="container">\n            <div class="row row-cols-1 row-cols-lg-2 row-cols-lg-3 g-3">\n                \x3c!-- left --\x3e\n                <div class="col-lg-3">\n                    <div class="">\n                        <div class="card-body">\n                            <h3 class="text-black fw-bold">An Application</h3>\n                            <p class="card-text text-bold">Using <i>properies</i> and <i>state</i>, we can put together a small Todo application. This example uses state to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>\n                        </div>\n                    </div>\n                </div>\n                \x3c!-- left --\x3e\n                <div class="col-lg-6">\n                    <DisplayCode></DisplayCode>\n                </div>\n                \x3c!-- demo 123--\x3e\n                <div class="col-lg-3 an-aplication"> \n                    <div class="card mb-4 rounded-3 shadow-sm border-secondary">\n                        <div class="card-header py-3 text-white bg-secondary ">\n                            <h4 class="my-0 fw-normal">Result</h4>\n                        </div>\n                        <div class="card-body border-secondary todo-app">\n                        </div>\n                    </div>\n                </div>\n                <style>\n                    .an-aplication input, \n                    .an-aplication button\n                    {\n                        margin-bottom: 10px;\n                        border-radius: 5px;\n                        border: 1 solid gray;\n                    }\n                </style>\n            \n            </div>\n        </div>\n      </div>\n        '}function X(){return this.beforeAppendChild=async e=>{let t=e.querySelector("code"),n=await fetch("react/livecode/HelloMessage.js");n=await n.text(),t.textContent=n},this.enableSubComponents({DisplayCode:D}),'\n    <div class="album pt-5">\n        <div class="container">\n            <div class="row row-cols-1 row-cols-lg-2 row-cols-lg-3 g-3">\n                \x3c!-- left --\x3e\n                <div class="col-lg-4">\n                    <div class="">\n                        <div class="card-body">\n                            <h3 class="text-black fw-bold">A Simple Component</h3>\n                            <p class="card-text text-bold">Kiwi JS components doesn\'t implement any special method, It use a <b>functionals component</b> to takes input data and returns what to display. This example uses <b>Template literals</b> and it is not needed any syntactic sugar. Input data that is passed into the component can be accessed as parameter and  via this.prop. (We dont use props in plural)</p>\n                            <p class="card-text text-bold">There is <b>not compilation step</b> required.</p>\n                        </div>\n                    </div>\n                </div>\n                \x3c!-- left --\x3e\n                <div class="col-lg-6">\n                    <DisplayCode></DisplayCode>\n                </div>\n                \x3c!-- demo --\x3e\n                <div class="col-lg-2"> \n                    <div class="card mb-4 rounded-3 shadow-sm border-secondary">\n                        <div class="card-header py-3 text-white bg-secondary ">\n                            <h4 class="my-0 fw-normal">Result</h4>\n                        </div>\n                        <div class="card-body border-secondary">\n                            Hello Taylor\n                        </div>\n                    </div>\n                </div>\n            \n            </div>\n        </div>\n      </div>\n        '}let G=null;const z=function(){let[e,t]=this.useState(0);return this.tick=()=>{document.contains(this.node)?t(e+1):clearInterval(G)},G=setTimeout(this.tick,1e3),`<div> Counter: ${e}</div>`};function V(){return this.beforeAppendChild=async e=>{let t=e.querySelector("code"),n=await fetch("react/livecode/State.js");n=await n.text(),t.textContent=n.replaceAll("// ","").split("\n").filter(((e,t)=>![].includes(t))).join("\n"),v(z).kiwiSelector(".a-stateful-component")},this.enableSubComponents({DisplayCode:D}),'\n    <div class="album pt-5">\n        <div class="container">\n            <div class="row row-cols-1 row-cols-lg-2 row-cols-lg-3 g-3">\n                \x3c!-- left --\x3e\n                <div class="col-lg-4">\n                    <div class="">\n                        <div class="card-body">\n                            <h3 class="text-black fw-bold">A Stateful Component</h3>\n                            <p class="card-text text-bold">In addition to taking input data (accessed via this.prop), a component can maintain internal <b>state</b> data (accessed via <b>this.useState()</b> method)</p>\n                            <p class="card-text text-bold">When a component’s state data changes, the rendered markup will be updated by re-invoking <b>constructor()</b> method.</p>\n                        </div>\n                    </div>\n                </div>\n                \x3c!-- left --\x3e\n                <div class="col-lg-6">\n                    <DisplayCode></DisplayCode>\n                </div>\n                \x3c!-- demo --\x3e\n                <div class="col-lg-2"> \n                    <div class="card mb-4 rounded-3 shadow-sm border-secondary">\n                        <div class="card-header py-3 text-white bg-secondary ">\n                            <h4 class="my-0 fw-normal">Result</h4>\n                        </div>\n                        <div class="card-body border-secondary a-stateful-component">\n                        </div>\n                    </div>\n                </div>\n            \n            </div>\n        </div>\n      </div>\n        '}function Q(){return this.goto=e=>{w.dispatch("General-page",1),e.preventDefault()},this.enableEvents("click"),'<div class="container-fluid py-5 text-center container-fluid k-bg-4">\n    <a href="#" class="btn my-2 py-2 k-bg-2" click="goto">Get Starter</a>\n    <a href="#" class="btn my-2 py-2 k-border-2 k-color-2 ms-4" click="goto">Take a tutorial</a>\n  </div>'}function _(){return this.goto=e=>{w.dispatch("General-page",1),e.preventDefault()},this.enableEvents("click"),'<section class="container-fluid py-5 text-center container-fluid k-bg-4" >\n      <div class="row py-lg-5" >\n        <div class="col-lg-6 col-md-8 mx-auto" style="padding-top: 56px">\n          <h1 class="fw-bolder  k-color-2">Kiwi JS</h1>\n          <p class="lead text-light">A killer  JavaScript library for building user interfaces<br/>\n            <b class="k-color-1">Faster</b>, \n            <b class="k-color-1">smaller</b>, \n            <b class="k-color-1">native</b>. No npm required. <br> It\'s not hype, it is JavaScript</p>\n            <a href="#" class="btn my-2 py-2 k-bg-2" click="goto">Get Starter</a>\n            <a href="#" class="btn my-2 py-2 k-border-2 k-color-2 ms-4" click="goto">Take a tutorial</a>\n          </p>\n        </div>\n      </div>\n    </section>'}function Z(){return'<div class="col">\n    <div class="card shadow-sm border-dark">\n        <div class="card-body k-bg-4">\n            <h3 class="k-color-2 fw-light">Component-Based</h3>\n            <p class="card-text text-light">Build encapsulated components that manage their own state, then compose them to make complex UIs.</p>\n            <p class="card-text text-light">Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>\n        </div>\n    </div>\n</div>'}function ee(){return' <div class="col">\n    <div class="card shadow-sm border-dark">\n        <div class="card-body k-bg-4">\n            <h3 class="k-color-2 fw-light">Declarative</h3>\n            <p class="card-text text-light">Kiwi JS makes it painless to create interactive UIs. Design simple\n                views for each state in your application, and React will efficiently update and render just the\n                right components when your data changes.</p>\n            <p class="card-text text-light">Declarative views make your code more predictable and easier to debug.</p>\n        </div>\n    </div>\n</div>'}function te(){return'<div class="col">\n    <div class="card shadow-sm border-dark">\n        <div class="card-body k-bg-4">\n            <h3 class="k-color-2 fw-light">Learn Once, Write Anywhere</h3>\n            <p class="card-text text-light">We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.</p>\n            <p class="card-text text-light">It would be easy render on the server using Node and power mobile apps using this library.</p>\n        </div>\n    </div>\n</div>'}function ne(){return this.enableSubComponents({Declarative:ee,ComponentBased:Z,LearnOnce:te}),'\n<div class="album py-5 ">\n    <div class="container">\n        <div class="row row-cols-1 row-cols-md-2 row-cols-md-3 g-3">\n            <Declarative></Declarative>\n            <ComponentBased></ComponentBased>\n            <LearnOnce></LearnOnce>\n        </div>\n    </div>\n  </div>\n    '}function ae(){return this.enableSubComponents({Section:_,ThreeColumns:ne,ASimpleComponent:X,AStatefulComponent:V,AnApplication:Y,AComponentUsingExternalPlugins:$,Pricing:Q}),'<main>\n    <Section></Section>\n    <ThreeColumns></ThreeColumns>\n    <div class="container"><hr></div>\n    <ASimpleComponent></ASimpleComponent>\n    <AStatefulComponent></AStatefulComponent>\n    <AnApplication></AnApplication>\n    <AComponentUsingExternalPlugins></AComponentUsingExternalPlugins>\n    <Pricing></Pricing>\n</main>'}function ie(){this.enableSubComponents({Home:ae,Docs:P});let e=JSON.parse(localStorage.getItem("page")||"0");const[t,n]=this.useState(e);return this.beforeAppendChild=()=>{w.subscribe("General-page",(e=>{console.log(e),localStorage.setItem("page",e),n(e),window.scrollTo({top:0,left:0,behavior:"smooth"})}))},`<div>${["<Home></Home>","<Docs></Docs>"][t]}</div>`}v((function(){return this.enableSubComponents({header:S,Footer:C,Content:ie}),'<div class="-k-bg-3">\n        <header></header>\n        <Content></Content>\n        <Footer></Footer>\n    </div>'})).kiwiSelector("body")})();